{"ast":null,"code":"var _jsxFileName = \"/home/student/websocket/websockets/src/pages/Chat/Chat.jsx\";\n// import React from \"react\";\n// import \"./Chat.css\";\n// import Message from \"./components/Message\";\n// import io from \"socket.io-client\";\n// const socket = io.connect(\"http://localhost:3001\", {\n//   transports: [\"websocket\"],\n// });\n// function Chat() {\n//   const [name, setName] = React.useState(\"\");\n//   const [username, setUsername] = React.useState(\"Tanya\");\n//   const [message, setMessage] = React.useState(\"\");\n//   const [messages, setMessages] = React.useState([]);\n//   const [typeName, setTypeName] = React.useState([])\n//   const getUserName = (e) => setName(e.target.value);\n//   const changeUserName = () => {\n//     setUsername(name);\n//     setTypeName(name);\n//   }\n//   const getUserMessage = (e) => {\n//     setMessage(e.target.value);\n//     typeUser();\n//   }\n//   const sendUserMessage = () => {\n//     const msg = {\n//       message,\n//       username,\n//     };\n//     setMessages((messages) => [...messages, msg]);\n//     socket.emit(\"set-message\", msg);\n//   };\n//   const typeUser = () => {\n//     socket.emit(\"typing\", typeName);\n//   }\n//   /* const onTyping = useCallback(\n//       debounce(\n//         (user) => {\n//           clearTimeout(user.interval);\n//           if (!typingUsers.includes(user.userName)) {\n//             setTypingUsers([...typingUsers, user.userName]);\n//           }\n//           user.interval = setTimeout(() => {\n//             setTypingUsers(\n//               typingUsers.filter((typingUser) => typingUser !== user.userName)\n//             );\n//           }, 3000);\n//           console.log(typingUsers);\n//         },\n//         [typingUsers],\n//         2000,\n//         { leading: true }\n//       )\n//     ); */\n//   React.useEffect(() => {\n//     socket.on(\"get-message\", (msg) => {\n//       setMessages((messages) => [...messages, msg]);\n//     });\n//     socket.on(\"typing\", () => {\n//     })\n//   }, [messages,]);\n//   return (\n//     <div className=\"chat\">\n//       <header>\n//         <h1>Super Chat</h1>\n//       </header>\n//       <section>\n//         <div id=\"change_username\">\n//           <input\n//             id=\"username\"\n//             type=\"text\"\n//             name=\"message\"\n//             onChange={getUserName}\n//           />\n//           <button id=\"send_username\" type=\"button\" onClick={changeUserName}>\n//             Change username\n//           </button>\n//         </div>\n//       </section>\n//       <section id=\"chatroom\">\n//         {messages.map((item) => (\n//           <Message username={item.username} message={item.message} />\n//         ))}\n//       </section>\n//       <section>\n//       </section>\n//       <section id=\"input_zone\">\n//         <input\n//           id=\"message\"\n//           className=\"vertical-align\"\n//           type=\"text\"\n//           onChange={getUserMessage}\n//         />\n//         <button\n//           id=\"send_message\"\n//           className=\"vertical-align\"\n//           type=\"button\"\n//           onClick={sendUserMessage}\n//         >\n//           Send\n//         </button>\n//       </section>\n//     </div>\n//   );\n// }\n// export default Chat;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport openSocket from 'socket.io-client';\nimport { debounce } from 'lodash';\nimport Message from '../../pages/Chat/components/Message/Message';\nimport './Chat.css';\nconst socket = openSocket('http://localhost:3001');\n\nconst Chat = () => {\n  const [nameInputValue, setNameInputValue] = useState('anonym');\n  const [messageInputValue, setMessageInputValue] = useState('');\n  const [userName, setUserName] = useState('anonym');\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]); //\n\n  const handleNameChange = value => {\n    setUserName(value);\n  };\n\n  const sendMessage = value => {\n    socket.emit('new_message', {\n      value,\n      userName\n    });\n  };\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      userName\n    });\n  };\n\n  const onMessage = useCallback(message => {\n    setMessages([...messages, message]);\n  }, [messages]);\n\n  const onTyping = userName => {\n    //\n    if (!typingUsers.includes(userName)) {\n      setTypingUsers([...typingUsers, user.userName]);\n    }\n\n    user.interval = setTimeout(() => {\n      setTypingUsers(typingUsers.filter(typingUser => typingUser !== user.userName));\n    }, 3000);\n  };\n\n  useEffect(() => {\n    socket.emit('connect');\n    socket.on('message', onMessage);\n    socket.on('typing', onTyping());\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, \"Super Chat\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"change_username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"username\",\n    value: nameInputValue,\n    onChange: event => {\n      setNameInputValue(event.target.value);\n    },\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"send_username\",\n    onClick: () => {\n      handleNameChange(nameInputValue);\n    },\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Change username\"))), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"chatroom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    username: message.userName,\n    message: message.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, typingUsers.map(user => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, user + ' is typing')))), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"input_zone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"message\",\n    value: messageInputValue,\n    className: \"vertical-align\",\n    onChange: event => {\n      setMessageInputValue(event.target.value);\n      handleTyping();\n    },\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"send_message\",\n    className: \"vertical-align\",\n    onClick: () => {\n      sendMessage(messageInputValue);\n      setMessageInputValue('');\n    },\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/student/websocket/websockets/src/pages/Chat/Chat.jsx"],"names":["React","useEffect","useState","useCallback","openSocket","debounce","Message","socket","Chat","nameInputValue","setNameInputValue","messageInputValue","setMessageInputValue","userName","setUserName","messages","setMessages","typingUsers","setTypingUsers","handleNameChange","value","sendMessage","emit","handleTyping","onMessage","message","onTyping","includes","user","interval","setTimeout","filter","typingUser","on","event","target","map"],"mappingsgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,OAAOC,OAAP,MAAoB,6CAApB;AAEA,OAAO,YAAP;AAEA,MAAMC,MAAM,GAAGH,UAAU,CAAC,uBAAD,CAAzB;;AAEA,MAAMI,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,QAAD,CAApD;AACA,QAAM,CAACS,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,QAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C,CALiB,CAKkC;;AAEnD,QAAMiB,gBAAgB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,WAAW,CAACM,KAAD,CAAX;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAID,KAAD,IAAW;AAC7Bb,IAAAA,MAAM,CAACe,IAAP,CAAY,aAAZ,EAA2B;AAAEF,MAAAA,KAAF;AAASP,MAAAA;AAAT,KAA3B;AACD,GAFD;;AAIA,QAAMU,YAAY,GAAG,MAAM;AACzBhB,IAAAA,MAAM,CAACe,IAAP,CAAY,QAAZ,EAAsB;AAAET,MAAAA;AAAF,KAAtB;AACD,GAFD;;AAIA,QAAMW,SAAS,GAAGrB,WAAW,CAC1BsB,OAAD,IAAa;AACXT,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcU,OAAd,CAAD,CAAX;AACD,GAH0B,EAI3B,CAACV,QAAD,CAJ2B,CAA7B;;AAOA,QAAMW,QAAQ,GAAIb,QAAD,IAAc;AAAC;AAC1B,QAAI,CAACI,WAAW,CAACU,QAAZ,CAAqBd,QAArB,CAAL,EAAqC;AACnCK,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBW,IAAI,CAACf,QAAtB,CAAD,CAAd;AACD;;AACDe,IAAAA,IAAI,CAACC,QAAL,GAAgBC,UAAU,CAAC,MAAM;AAC/BZ,MAAAA,cAAc,CACZD,WAAW,CAACc,MAAZ,CAAoBC,UAAD,IAAgBA,UAAU,KAAKJ,IAAI,CAACf,QAAvD,CADY,CAAd;AAGD,KAJyB,EAIvB,IAJuB,CAA1B;AAKD,GATL;;AAWFZ,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ;AACAf,IAAAA,MAAM,CAAC0B,EAAP,CAAU,SAAV,EAAqBT,SAArB;AACAjB,IAAAA,MAAM,CAAC0B,EAAP,CAAU,QAAV,EAAoBP,QAAQ,EAA5B;AACD,GAJM,EAIJ,EAJI,CAAT;AAME,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,KAAK,EAAEjB,cAFT;AAGE,IAAA,QAAQ,EAAGyB,KAAD,IAAW;AACnBxB,MAAAA,iBAAiB,CAACwB,KAAK,CAACC,MAAN,CAAaf,KAAd,CAAjB;AACD,KALH;AAME,IAAA,IAAI,EAAC,MANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE;AACE,IAAA,EAAE,EAAC,eADL;AAEE,IAAA,OAAO,EAAE,MAAM;AACbD,MAAAA,gBAAgB,CAACV,cAAD,CAAhB;AACD,KAJH;AAKE,IAAA,IAAI,EAAC,QALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATF,CADF,CALF,eA2BE;AAAS,IAAA,EAAE,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,QAAQ,CAACqB,GAAT,CAAcX,OAAD,iBACZ,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEA,OAAO,CAACZ,QAA3B;AAAqC,IAAA,OAAO,EAAEY,OAAO,CAACL,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,eAIE;AAAS,IAAA,EAAE,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,WAAW,CAACmB,GAAZ,CAAiBR,IAAD,iBACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAI,GAAG,YAAb,CADD,CADH,CAJF,CA3BF,eAsCE;AAAS,IAAA,EAAE,EAAC,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,SADL;AAEE,IAAA,KAAK,EAAEjB,iBAFT;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAIE,IAAA,QAAQ,EAAGuB,KAAD,IAAW;AACnBtB,MAAAA,oBAAoB,CAACsB,KAAK,CAACC,MAAN,CAAaf,KAAd,CAApB;AACAG,MAAAA,YAAY;AACb,KAPH;AAQE,IAAA,IAAI,EAAC,MARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE;AACE,IAAA,EAAE,EAAC,cADL;AAEE,IAAA,SAAS,EAAC,gBAFZ;AAGE,IAAA,OAAO,EAAE,MAAM;AACbF,MAAAA,WAAW,CAACV,iBAAD,CAAX;AACAC,MAAAA,oBAAoB,CAAC,EAAD,CAApB;AACD,KANH;AAOE,IAAA,IAAI,EAAC,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,CAtCF,CADF;AAgED,CA3GD;;AA6GA,eAAeJ,IAAf","sourcesContent":["// import React from \"react\";\n// import \"./Chat.css\";\n// import Message from \"./components/Message\";\n// import io from \"socket.io-client\";\n\n// const socket = io.connect(\"http://localhost:3001\", {\n//   transports: [\"websocket\"],\n// });\n\n// function Chat() {\n//   const [name, setName] = React.useState(\"\");\n//   const [username, setUsername] = React.useState(\"Tanya\");\n//   const [message, setMessage] = React.useState(\"\");\n//   const [messages, setMessages] = React.useState([]);\n//   const [typeName, setTypeName] = React.useState([])\n//   const getUserName = (e) => setName(e.target.value);\n//   const changeUserName = () => {\n//     setUsername(name);\n//     setTypeName(name);\n//   }\n//   const getUserMessage = (e) => {\n//     setMessage(e.target.value);\n//     typeUser();\n//   }\n\n//   const sendUserMessage = () => {\n//     const msg = {\n//       message,\n//       username,\n//     };\n\n//     setMessages((messages) => [...messages, msg]);\n//     socket.emit(\"set-message\", msg);\n//   };\n\n//   const typeUser = () => {\n//     socket.emit(\"typing\", typeName);\n//   }\n//   /* const onTyping = useCallback(\n//       debounce(\n//         (user) => {\n//           clearTimeout(user.interval);\n//           if (!typingUsers.includes(user.userName)) {\n//             setTypingUsers([...typingUsers, user.userName]);\n//           }\n//           user.interval = setTimeout(() => {\n//             setTypingUsers(\n//               typingUsers.filter((typingUser) => typingUser !== user.userName)\n//             );\n//           }, 3000);\n//           console.log(typingUsers);\n//         },\n//         [typingUsers],\n//         2000,\n//         { leading: true }\n//       )\n//     ); */\n//   React.useEffect(() => {\n//     socket.on(\"get-message\", (msg) => {\n//       setMessages((messages) => [...messages, msg]);\n//     });\n//     socket.on(\"typing\", () => {\n\n//     })\n//   }, [messages,]);\n\n\n\n//   return (\n//     <div className=\"chat\">\n//       <header>\n//         <h1>Super Chat</h1>\n//       </header>\n\n//       <section>\n//         <div id=\"change_username\">\n//           <input\n//             id=\"username\"\n//             type=\"text\"\n//             name=\"message\"\n//             onChange={getUserName}\n//           />\n//           <button id=\"send_username\" type=\"button\" onClick={changeUserName}>\n//             Change username\n//           </button>\n//         </div>\n//       </section>\n\n//       <section id=\"chatroom\">\n//         {messages.map((item) => (\n//           <Message username={item.username} message={item.message} />\n//         ))}\n//       </section>\n//       <section>\n\n//       </section>\n//       <section id=\"input_zone\">\n//         <input\n//           id=\"message\"\n//           className=\"vertical-align\"\n//           type=\"text\"\n//           onChange={getUserMessage}\n//         />\n//         <button\n//           id=\"send_message\"\n//           className=\"vertical-align\"\n//           type=\"button\"\n//           onClick={sendUserMessage}\n//         >\n//           Send\n//         </button>\n//       </section>\n//     </div>\n//   );\n// }\n\n// export default Chat;\n\n\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport openSocket from 'socket.io-client';\nimport { debounce } from 'lodash';\n\nimport Message from '../../pages/Chat/components/Message/Message';\n\nimport './Chat.css';\n\nconst socket = openSocket('http://localhost:3001');\n\nconst Chat = () => {\n  const [nameInputValue, setNameInputValue] = useState('anonym');\n  const [messageInputValue, setMessageInputValue] = useState('');\n  const [userName, setUserName] = useState('anonym');\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);//\n\n  const handleNameChange = (value) => {\n    setUserName(value);\n  };\n\n  const sendMessage = (value) => {\n    socket.emit('new_message', { value, userName });\n  };\n\n  const handleTyping = () => {\n    socket.emit('typing', { userName });\n  };\n\n  const onMessage = useCallback(\n    (message) => {\n      setMessages([...messages, message]);\n    },\n    [messages]\n  );\n\n  const onTyping = (userName) => {//\n        if (!typingUsers.includes(userName)) {\n          setTypingUsers([...typingUsers, user.userName]);\n        }\n        user.interval = setTimeout(() => {\n          setTypingUsers(\n            typingUsers.filter((typingUser) => typingUser !== user.userName)\n          );\n        }, 3000);\n      }\n\nuseEffect(() => {\n    socket.emit('connect');\n    socket.on('message', onMessage);\n    socket.on('typing', onTyping());\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <header>\n        <h1>Super Chat</h1>\n      </header>\n\n      <section>\n        <div id=\"change_username\">\n          <input\n            id=\"username\"\n            value={nameInputValue}\n            onChange={(event) => {\n              setNameInputValue(event.target.value);\n            }}\n            type=\"text\"\n          />\n          <button\n            id=\"send_username\"\n            onClick={() => {\n              handleNameChange(nameInputValue);\n            }}\n            type=\"button\"\n          >\n            Change username\n          </button>\n        </div>\n      </section>\n\n      <section id=\"chatroom\">\n        {messages.map((message) => (\n          <Message username={message.userName} message={message.value} />\n        ))}\n        <section id=\"feedback\">\n          {typingUsers.map((user) => (\n            <div>{user + ' is typing'}</div>\n          ))}\n        </section>\n      </section>\n\n      <section id=\"input_zone\">\n        <input\n          id=\"message\"\n          value={messageInputValue}\n          className=\"vertical-align\"\n          onChange={(event) => {\n            setMessageInputValue(event.target.value);\n            handleTyping();\n          }}\n          type=\"text\"\n        />\n        <button\n          id=\"send_message\"\n          className=\"vertical-align\"\n          onClick={() => {\n            sendMessage(messageInputValue);\n            setMessageInputValue('');\n          }}\n          type=\"button\"\n        >\n          Send\n        </button>\n      </section>\n    </div>\n  );\n};\n\nexport default Chat;\n\n"]},"metadata":{},"sourceType":"module"}