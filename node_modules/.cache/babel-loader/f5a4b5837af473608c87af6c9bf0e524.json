{"ast":null,"code":"var _jsxFileName = \"/home/student/websocket/websockets/src/pages/Chat/Chat.jsx\";\nimport React from \"react\";\nimport \"./Chat.css\";\nimport Message from \"./components/Message\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:3001\", {\n  transports: [\"websocket\"]\n});\n\nfunction Chat() {\n  const [name, setName] = React.useState(\"\");\n  const [username, setUsername] = React.useState(\"Tanya\");\n  const [message, setMessage] = React.useState(\"\");\n  const [messages, setMessages] = React.useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n\n  const getUserName = e => setName(e.target.value);\n\n  const changeUserName = () => {\n    setUsername(name);\n  };\n\n  const getUserMessage = e => {\n    setMessage(e.target.value);\n    handleTyping();\n  };\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      username\n    });\n  };\n\n  const sendUserMessage = () => {\n    const msg = {\n      message,\n      username\n    };\n    setMessages(messages => [...messages, msg]);\n    socket.emit(\"set-message\", msg);\n  };\n\n  const onTyping = () => {\n    if (!typingUsers.includes(userName)) {\n      setTypingUsers([...typingUsers, username]);\n    }\n\n    setTimeout(() => {\n      setTypingUsers(typingUsers.filter(typingUser => typingUser !== username));\n    }, 3000);\n  };\n\n  React.useEffect(() => {\n    socket.on(\"get-message\", msg => {\n      setMessages(messages => [...messages, msg]);\n    });\n    socket.on('typing', onTyping);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Super Chat\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"change_username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"username\",\n    type: \"text\",\n    name: \"message\",\n    onChange: getUserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"send_username\",\n    type: \"button\",\n    onClick: changeUserName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Change username\"))), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"chatroom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, messages.map(item => /*#__PURE__*/React.createElement(Message, {\n    username: item.username,\n    message: item.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, typingUsers.map(user => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, user + ' is typing'))), /*#__PURE__*/React.createElement(\"section\", {\n    id: \"input_zone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"message\",\n    className: \"vertical-align\",\n    type: \"text\",\n    onChange: getUserMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"send_message\",\n    className: \"vertical-align\",\n    type: \"button\",\n    onClick: sendUserMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n}\n\nexport default Chat; // import React, { useEffect, useState, useCallback } from 'react';\n// import openSocket from 'socket.io-client';\n// import { debounce } from 'lodash';\n// import Message from '../../pages/Chat/components/Message/Message';\n// import './Chat.css';\n// const socket = openSocket('http://localhost:3001');\n// const Chat = () => {\n//   const [nameInputValue, setNameInputValue] = useState('anonym');\n//   const [messageInputValue, setMessageInputValue] = useState('');\n//   const [userName, setUserName] = useState('anonym');\n//   const [messages, setMessages] = useState([]);\n//   const [typingUsers, setTypingUsers] = useState([]);\n//   const handleNameChange = (value) => {\n//     setUserName(value);\n//   };\n//   const sendMessage = (value) => {\n//     socket.emit('new_message', { value, userName });\n//   };\n//   const handleTyping = () => {\n//     socket.emit('typing', { userName });\n//   };\n//   const onMessage = useCallback(\n//     (message) => {\n//       console.log(message);\n//       console.log(messages);\n//       setMessages([...messages, message]);\n//       console.log(messages);\n//     },\n//     [messages]\n//   );\n//   const onTyping = () => {\n//         if (!typingUsers.includes(userName)) {\n//           setTypingUsers([...typingUsers, userName]);\n//         }\n//       setTimeout(() => {\n//           setTypingUsers(\n//             typingUsers.filter((typingUser) => typingUser !== userName)\n//           );\n//         }, 3000);\n//       }\n//   useEffect(() => {\n//     socket.emit('connect');\n//     socket.on('message', onMessage);\n//     socket.on('typing', onTyping);\n//   }, [onMessage, onTyping]);\n//   return (\n//     <div className=\"chat\">\n//       <header>\n//         <h1>Super Chat</h1>\n//       </header>\n//       <section>\n//         <div id=\"change_username\">\n//           <input\n//             id=\"username\"\n//             value={nameInputValue}\n//             onChange={(event) => {\n//               setNameInputValue(event.target.value);\n//             }}\n//             type=\"text\"\n//           />\n//           <button\n//             id=\"send_username\"\n//             onClick={() => {\n//               handleNameChange(nameInputValue);\n//             }}\n//             type=\"button\"\n//           >\n//             Change username\n//           </button>\n//         </div>\n//       </section>\n//       <section id=\"chatroom\">\n//         {messages.map((message) => (\n//           <Message username={message.userName} message={message.value} />\n//         ))}\n//         <section id=\"feedback\">\n//           {typingUsers.map((user) => (\n//             <div>{user + ' is typing'}</div>\n//           ))}\n//         </section>\n//       </section>\n//       <section id=\"input_zone\">\n//         <input\n//           id=\"message\"\n//           value={messageInputValue}\n//           className=\"vertical-align\"\n//           onChange={(event) => {\n//             setMessageInputValue(event.target.value);\n//             handleTyping();\n//           }}\n//           type=\"text\"\n//         />\n//         <button\n//           id=\"send_message\"\n//           className=\"vertical-align\"\n//           onClick={() => {\n//             sendMessage(messageInputValue);\n//             setMessageInputValue('');\n//           }}\n//           type=\"button\"\n//         >\n//           Send\n//         </button>\n//       </section>\n//     </div>\n//   );\n// };\n// export default Chat;","map":{"version":3,"sources":["/home/student/websocket/websockets/src/pages/Chat/Chat.jsx"],"names":["React","Message","io","socket","connect","transports","Chat","name","setName","useState","username","setUsername","message","setMessage","messages","setMessages","typingUsers","setTypingUsers","getUserName","e","target","value","changeUserName","getUserMessage","handleTyping","emit","sendUserMessage","msg","onTyping","includes","userName","setTimeout","filter","typingUser","useEffect","on","map","item","user"],"mappings":"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":["import React from \"react\";\nimport \"./Chat.css\";\nimport Message from \"./components/Message\";\nimport io from \"socket.io-client\";\n\nconst socket = io.connect(\"http://localhost:3001\", {\n  transports: [\"websocket\"],\n});\n\nfunction Chat() {\n  const [name, setName] = React.useState(\"\");\n  const [username, setUsername] = React.useState(\"Tanya\");\n  const [message, setMessage] = React.useState(\"\");\n  const [messages, setMessages] = React.useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n\n  const getUserName = (e) => setName(e.target.value);\n\n  const changeUserName = () => {\n    setUsername(name);\n  }\n\n  const getUserMessage = (e) => {\n    setMessage(e.target.value);\n    handleTyping();\n  }\n\n  const handleTyping = () => {\n    socket.emit('typing', { username });\n  };\n\n  const sendUserMessage = () => {\n    const msg = {\n      message,\n      username,\n    };\n    setMessages((messages) => [...messages, msg]);\n    socket.emit(\"set-message\", msg);\n  };\n\n  const onTyping = () => {\n    if (!typingUsers.includes(userName)) {\n      setTypingUsers([...typingUsers, username]);\n    }\n    setTimeout(() => {\n      setTypingUsers(\n        typingUsers.filter((typingUser) => typingUser !== username)\n      );\n    }, 3000);\n  }\n\n  React.useEffect(() => {\n    socket.on(\"get-message\", (msg) => {\n      setMessages((messages) => [...messages, msg]);\n    });\n    socket.on('typing', onTyping);\n  }, []);\n\n\n\n  return (\n    <div className=\"chat\">\n      <header>\n        <h1>Super Chat</h1>\n      </header>\n\n      <section>\n        <div id=\"change_username\">\n          <input\n            id=\"username\"\n            type=\"text\"\n            name=\"message\"\n            onChange={getUserName}\n          />\n          <button id=\"send_username\" type=\"button\" onClick={changeUserName}>\n            Change username\n          </button>\n        </div>\n      </section>\n\n      <section id=\"chatroom\">\n        {messages.map((item) => (\n          <Message username={item.username} message={item.message} />\n        ))}\n      </section>\n      <section id=\"feedback\">\n        {typingUsers.map((user) => (\n          <div>{user + ' is typing'}</div>\n        ))}\n      </section>\n      <section id=\"input_zone\">\n        <input\n          id=\"message\"\n          className=\"vertical-align\"\n          type=\"text\"\n          onChange={getUserMessage}\n        />\n        <button\n          id=\"send_message\"\n          className=\"vertical-align\"\n          type=\"button\"\n          onClick={sendUserMessage}\n        >\n          Send\n        </button>\n      </section>\n    </div>\n  );\n}\n\nexport default Chat;\n\n\n\n// import React, { useEffect, useState, useCallback } from 'react';\n// import openSocket from 'socket.io-client';\n// import { debounce } from 'lodash';\n\n// import Message from '../../pages/Chat/components/Message/Message';\n\n// import './Chat.css';\n\n// const socket = openSocket('http://localhost:3001');\n\n// const Chat = () => {\n//   const [nameInputValue, setNameInputValue] = useState('anonym');\n//   const [messageInputValue, setMessageInputValue] = useState('');\n//   const [userName, setUserName] = useState('anonym');\n//   const [messages, setMessages] = useState([]);\n//   const [typingUsers, setTypingUsers] = useState([]);\n\n//   const handleNameChange = (value) => {\n//     setUserName(value);\n//   };\n\n//   const sendMessage = (value) => {\n//     socket.emit('new_message', { value, userName });\n//   };\n\n//   const handleTyping = () => {\n//     socket.emit('typing', { userName });\n//   };\n\n//   const onMessage = useCallback(\n//     (message) => {\n//       console.log(message);\n//       console.log(messages);\n//       setMessages([...messages, message]);\n//       console.log(messages);\n//     },\n//     [messages]\n//   );\n\n//   const onTyping = () => {\n//         if (!typingUsers.includes(userName)) {\n//           setTypingUsers([...typingUsers, userName]);\n//         }\n//       setTimeout(() => {\n//           setTypingUsers(\n//             typingUsers.filter((typingUser) => typingUser !== userName)\n//           );\n//         }, 3000);\n//       }\n\n\n//   useEffect(() => {\n//     socket.emit('connect');\n//     socket.on('message', onMessage);\n//     socket.on('typing', onTyping);\n//   }, [onMessage, onTyping]);\n\n//   return (\n//     <div className=\"chat\">\n//       <header>\n//         <h1>Super Chat</h1>\n//       </header>\n\n//       <section>\n//         <div id=\"change_username\">\n//           <input\n//             id=\"username\"\n//             value={nameInputValue}\n//             onChange={(event) => {\n//               setNameInputValue(event.target.value);\n//             }}\n//             type=\"text\"\n//           />\n//           <button\n//             id=\"send_username\"\n//             onClick={() => {\n//               handleNameChange(nameInputValue);\n//             }}\n//             type=\"button\"\n//           >\n//             Change username\n//           </button>\n//         </div>\n//       </section>\n\n//       <section id=\"chatroom\">\n//         {messages.map((message) => (\n//           <Message username={message.userName} message={message.value} />\n//         ))}\n//         <section id=\"feedback\">\n//           {typingUsers.map((user) => (\n//             <div>{user + ' is typing'}</div>\n//           ))}\n//         </section>\n//       </section>\n\n//       <section id=\"input_zone\">\n//         <input\n//           id=\"message\"\n//           value={messageInputValue}\n//           className=\"vertical-align\"\n//           onChange={(event) => {\n//             setMessageInputValue(event.target.value);\n//             handleTyping();\n//           }}\n//           type=\"text\"\n//         />\n//         <button\n//           id=\"send_message\"\n//           className=\"vertical-align\"\n//           onClick={() => {\n//             sendMessage(messageInputValue);\n//             setMessageInputValue('');\n//           }}\n//           type=\"button\"\n//         >\n//           Send\n//         </button>\n//       </section>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n"]},"metadata":{},"sourceType":"module"}